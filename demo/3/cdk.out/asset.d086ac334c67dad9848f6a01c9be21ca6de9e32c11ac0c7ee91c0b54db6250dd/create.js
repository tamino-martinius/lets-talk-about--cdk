"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (event = {}) => {
    if (!event.body) {
        return {
            statusCode: 400,
            body: 'invalid request, you are missing the parameter body',
        };
    }
    const item = typeof event.body == 'object' ? event.body : JSON.parse(event.body);
    item[PRIMARY_KEY] = Math.random()
        .toString(26)
        .slice(2);
    const params = {
        TableName: TABLE_NAME,
        Item: item,
    };
    try {
        await db.put(params).promise();
        return { statusCode: 201, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' &&
            dbError.message.includes('reserved keyword')
            ? DYNAMODB_EXECUTION_ERROR
            : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFDaEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBRWxELE1BQU0saUJBQWlCLEdBQUcseURBQXlELEVBQ2pGLHdCQUF3QixHQUFHLCtGQUErRixDQUFDO0FBRWhILFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxRQUFhLEVBQUUsRUFBZ0IsRUFBRTtJQUM3RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNmLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxxREFBcUQ7U0FDNUQsQ0FBQztLQUNIO0lBQ0QsTUFBTSxJQUFJLEdBQ1IsT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FDOUIsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUNaLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNaLE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLFVBQVU7UUFDckIsSUFBSSxFQUFFLElBQUk7S0FDWCxDQUFDO0lBRUYsSUFBSTtRQUNGLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDdEM7SUFBQyxPQUFPLE9BQU8sRUFBRTtRQUNoQixNQUFNLGFBQWEsR0FDakIsT0FBTyxDQUFDLElBQUksS0FBSyxxQkFBcUI7WUFDdEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUMsQ0FBQyxDQUFDLHdCQUF3QjtZQUMxQixDQUFDLENBQUMsaUJBQWlCLENBQUM7UUFDeEIsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDO0tBQ2pEO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJztcbmNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVkgfHwgJyc7XG5cbmNvbnN0IFJFU0VSVkVEX1JFU1BPTlNFID0gYEVycm9yOiBZb3UncmUgdXNpbmcgQVdTIHJlc2VydmVkIGtleXdvcmRzIGFzIGF0dHJpYnV0ZXNgLFxuICBEWU5BTU9EQl9FWEVDVVRJT05fRVJST1IgPSBgRXJyb3I6IEV4ZWN1dGlvbiB1cGRhdGUsIGNhdXNlZCBhIER5bmFtb2RiIGVycm9yLCBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgeW91ciBDbG91ZFdhdGNoIExvZ3MuYDtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgaWYgKCFldmVudC5ib2R5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgIGJvZHk6ICdpbnZhbGlkIHJlcXVlc3QsIHlvdSBhcmUgbWlzc2luZyB0aGUgcGFyYW1ldGVyIGJvZHknLFxuICAgIH07XG4gIH1cbiAgY29uc3QgaXRlbSA9XG4gICAgdHlwZW9mIGV2ZW50LmJvZHkgPT0gJ29iamVjdCcgPyBldmVudC5ib2R5IDogSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgaXRlbVtQUklNQVJZX0tFWV0gPSBNYXRoLnJhbmRvbSgpXG4gICAgLnRvU3RyaW5nKDI2KVxuICAgIC5zbGljZSgyKTtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICBJdGVtOiBpdGVtLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgZGIucHV0KHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMSwgYm9keTogJycgfTtcbiAgfSBjYXRjaCAoZGJFcnJvcikge1xuICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPVxuICAgICAgZGJFcnJvci5jb2RlID09PSAnVmFsaWRhdGlvbkV4Y2VwdGlvbicgJiZcbiAgICAgIGRiRXJyb3IubWVzc2FnZS5pbmNsdWRlcygncmVzZXJ2ZWQga2V5d29yZCcpXG4gICAgICAgID8gRFlOQU1PREJfRVhFQ1VUSU9OX0VSUk9SXG4gICAgICAgIDogUkVTRVJWRURfUkVTUE9OU0U7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNTAwLCBib2R5OiBlcnJvclJlc3BvbnNlIH07XG4gIH1cbn07XG4iXX0=